service:
  name: serverless-twitter-backend

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Twitter API
        description: Backend for Twitter Clone
    models:
      - name: CreateTweet
        contentType: application/json
        schema: ${file(models/create-tweet-request.json)}
      - name: CreateUser
        contentType: application/json
        schema: ${file(models/create-user-request.json)}
      - name: FollowUser
        contentType: application/json
        schema: ${file(models/follow-user-request.json)}
      - name: LikeTweet
        contentType: application/json
        schema: ${file(models/like-tweet-request.json)}

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TWEET_TABLE: Tweet-${self:provider.stage}
    USER_TABLE: Twitter-User-${self:provider.stage}
    IMAGES_BUCKET: twitter-images-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: user
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create User
            description: Create User
            requestModels:
              'application/json': CreateUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  CreateTweet:
    handler: src/lambda/http/createTweet.handler
    events:
      - http:
          method: post
          path: tweet
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create Tweet
            description: Create Tweet
            requestModels:
              'application/json': CreateTweet
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}

  GetTweets:
    handler: src/lambda/http/getTweets.handler
    events:
      - http:
          method: get
          path: tweet
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

  UserTweets:
    handler: src/lambda/http/getUserTweets.handler
    events:
      - http:
          method: get
          path: tweet/specific/{authType}/{userId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

  UpdateTweet:
    handler: src/lambda/http/updateTweet.handler
    events:
      - http:
          method: patch
          path: tweet/{tweetId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update Tweet
            description: Update Tweet
            requestModels:
              'application/json': LikeTweet
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}

  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    events:
      - http:
          method: patch
          path: user
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update User
            description: Update User
            requestModels:
              'application/json': FollowUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  GetUsers:
    handler: src/lambda/http/getUsers.handler
    events:
      - http:
          method: get
          path: user
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  GetUserById:
    handler: src/lambda/http/getUserById.handler
    events:
      - http:
          method: get
          path: user/specific/{authType}/{userId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  DeleteTweet:
    handler: src/lambda/http/deleteTweet.handler
    events:
      - http:
          method: delete
          path: tweet/{tweetId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}

  SignedUrl:
    handler: src/lambda/http/signedUrl.handler
    events:
      - http:
          method: get
          path: tweet/signedUrl/{tweetId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

resources:
  Resources:

    TweetDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TWEET_TABLE}

    UserDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}

    TwitterBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*''"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi